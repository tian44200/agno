[project]
name = "agno"
version = "2.2.6"
description = "Agno: a lightweight library for building Multi-Agent Systems"
requires-python = ">=3.7,<4"
readme = "README.md"
license-files = ["LICENSE"]
authors = [
  {name = "Ashpreet Bedi", email = "ashpreet@agno.com"}
]
keywords = [
  "agent",
  "reasoning",
  "llm",
  "large-language-model",
  "framework",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
  "docstring-parser",
  "gitpython",
  "h11>=0.16.0",
  "httpx",
  "packaging",
  "pydantic-settings",
  "pydantic",
  "python-dotenv",
  "python-multipart",
  "pyyaml",
  "rich",
  "typer",
  "typing-extensions",
]

[project.optional-dependencies]
dev = ["mypy", "pytest", "pytest-asyncio", "pytest-cov", "pytest-mock", "ruff", "timeout-decorator", "types-pyyaml", "types-aiofiles", "fastapi", "uvicorn"]

os = ["fastapi", "uvicorn", "PyJWT"]

# Models integration test dependencies
integration-tests = [
    "exa_py",
    "ddgs",
    "yfinance",
    "sqlalchemy",
    "Pillow",
    "fastmcp"
]

# Dependencies for Telemetry
opentelemetry = ["opentelemetry-sdk", "opentelemetry-exporter-otlp"]
weave = ["weave"]
openlit = ["openlit", "agno[opentelemetry]"]
arize = ["arize-phoenix", "agno[opentelemetry]", "opentelemetry-exporter-otlp-proto-grpc", "opentelemetry-distro"]
langfuse = ["langfuse"]

# Dependencies for Models
aws-bedrock = ["boto3", "aioboto3"]
anthropic = ["anthropic"]
azure = ["azure-ai-inference", "aiohttp"]
cerebras = ["cerebras-cloud-sdk"]
cohere = ["cohere"]
infinity = ["infinity_client"]
google = ["google-genai"]
groq = ["groq"]
ibm = ["ibm-watsonx-ai"]
litellm = ["litellm"]
lmstudio = ["lmstudio"]
meta = ["llama-api-client"]
mistral = ["mistralai"]
ollama = ["ollama"]
openai = ["openai"]
portkey = ["portkey-ai"]

# Dependencies for Tools
agentql = ["agentql"]
apify = ["apify-client"]
arxiv = ["arxiv"]
brave = ["brave-search"]
browserbase = ["browserbase", "playwright"]
cartesia = ["cartesia"]
confluence = ["atlassian-python-api"]
ddg = ["ddgs"]
duckdb = ["duckdb"]
elevenlabs = ["elevenlabs"]
evm = ["web3"]
exa = ["exa_py"]
fal = ["fal_client"]
firecrawl = ["firecrawl-py"]
tavily = ["tavily-python"]
crawl4ai= ["crawl4ai"]
github = ["PyGithub"]
gmail = ["google-api-python-client", "google-auth-httplib2", "google-auth-oauthlib"]
google_bigquery = ["google-cloud-bigquery"]
googlemaps = ["googlemaps", "google-maps-places"]
matplotlib = ["matplotlib"]
mcp = ["mcp"]
mem0 = ["mem0ai"]
memori = ["memorisdk"]
newspaper = ["newspaper4k", "lxml_html_clean"]
notion = ["notion-client"]
opencv = ["opencv-python"]
psycopg = ["psycopg-binary", "psycopg"]
reportlab = ["reportlab"]
scrapegraph = ["scrapegraph-py"]
todoist = ["todoist-api-python"]
valyu = ["valyu"]
webex = ["webexpythonsdk"]
yfinance = ["yfinance"]
youtube = ["youtube_transcript_api"]
zep = ["zep-cloud"]
daytona=["daytona"]
oxylabs = ["oxylabs"]
trafilatura = ["trafilatura"]
neo4j = ["neo4j"]

# Dependencies for Storage
sql = ["sqlalchemy"]
postgres = ["psycopg-binary"]
async_postgres = ["asyncpg"]
sqlite = ["sqlalchemy"]
gcs = ["google-cloud-storage"]
firestore = ["google-cloud-firestore"]
redis = ["redis"]

# Dependencies for Vector databases
pgvector = ["pgvector"]
chromadb = ["chromadb"]
lancedb = ["lancedb>=0.24.0", "tantivy"]
pylance = ["pylance"]
qdrant = ["qdrant-client"]
couchbase = ["couchbase"]
cassandra = ["cassio"]
mongodb = ["pymongo[srv]"]
singlestore = ["sqlalchemy"]
weaviate = ["weaviate-client"]
milvusdb = ["pymilvus>=2.5.10"]
clickhouse = ["clickhouse-connect"]
pinecone = ["pinecone==5.4.2"]
surrealdb = ["surrealdb>=1.0.4"]
upstash = ["upstash-vector"]

# Dependencies for Knowledge
pdf = ["pypdf", "rapidocr_onnxruntime"]
docx = ["python-docx"]
pptx = ["python-pptx"]
text = ["aiofiles"]
csv = ["aiofiles"]
markdown = ["unstructured", "markdown", "aiofiles"]
chonkie = ["chonkie[st]", "chonkie"]

# Dependencies for AG-UI integration
agui = ["ag-ui-protocol"]

# Dependencies for A2A integration
a2a = ["a2a-sdk"]

# Dependencies for Embedders
huggingface = [
    "huggingface-hub",
]

# Dependencies for Performance
performance = ["memory_profiler"]

# Dependencies for Running cookbook
cookbooks = ["inquirer", "email_validator"]

# Dependencies for Docker
docker = ["agno-infra[docker]"]

# Dependencies for AWS
aws = ["agno-infra[aws]", "agno-infra[docker]"]

infra = ["agno-infra"]

# All models
models = [
  "agno[aws-bedrock]",
  "agno[anthropic]",
  "agno[azure]",
  "agno[cerebras]",
  "agno[cohere]",
  "agno[google]",
  "agno[groq]",
  "agno[ibm]",
  "agno[infinity]",
  "agno[litellm]",
  "agno[meta]",
  "agno[mistral]",
  "agno[ollama]",
  "agno[openai]",
  "agno[portkey]"
]

# All tools
tools = [
  "agno[apify]",
  "agno[arxiv]",
  "agno[brave]",
  "agno[exa]",
  "agno[cartesia]",
  "agno[ddg]",
  "agno[duckdb]",
  "agno[newspaper]",
  "agno[youtube]",
  "agno[firecrawl]",
  "agno[tavily]",
  "agno[crawl4ai]",
  "agno[github]",
  "agno[gmail]",
  "agno[googlemaps]",
  "agno[todoist]",
  "agno[matplotlib]",
  "agno[elevenlabs]",
  "agno[evm]",
  "agno[fal]",
  "agno[webex]",
  "agno[mcp]",
  "agno[browserbase]",
  "agno[agentql]",
  "agno[opencv]",
  "agno[scrapegraph]",
  "agno[valyu]",
#  "agno[yfinance]",  # Broken right now
  "agno[confluence]",
  "agno[notion]",
  "agno[oxylabs]",
  "agno[zep]",
  "agno[mem0]",
  "agno[memori]",
  "agno[google_bigquery]",
  "agno[psycopg]",
  "agno[reportlab]",
  "agno[trafilatura]",
  "agno[neo4j]",
]

# All storage
storage = [
  "agno[sql]",
  "agno[postgres]",
  "agno[async_postgres]",
  "agno[sqlite]",
  "agno[gcs]",
  "agno[firestore]",
  "agno[redis]",
]

# All vector databases
vectordbs = [
  "agno[pgvector]",
  "agno[chromadb]",
  "agno[lancedb]",
  "agno[qdrant]",
  "agno[couchbase]",
  "agno[cassandra]",
  "agno[mongodb]",
  "agno[singlestore]",
  "agno[weaviate]",
  "agno[milvusdb]",
  "agno[clickhouse]",
  "agno[pinecone]",
  "agno[surrealdb]",
  "agno[upstash]",
]

# All knowledge
knowledge = [
  "agno[pdf]",
  "agno[docx]",
  "agno[pptx]",
  "agno[text]",
  "agno[csv]",
  "agno[markdown]",
  "agno[chonkie]"
]

# All embedders
embedders = [
  "agno[huggingface]"
]

# All libraries for testing
tests = [
    "agno[dev]",
    "agno[models]",
    "agno[tools]",
    "agno[storage]",
    "agno[vectordbs]",
    "agno[knowledge]",
    "agno[embedders]",
    "agno[performance]",
    "agno[cookbooks]",
    "agno[agui]",
    "twine",
    "build",
]

[project.urls]
homepage = "https://agno.com"
documentation = "https://docs.agno.com"

[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
include = ["agno*"]

[tool.setuptools.package-data]
agno = ["py.typed"]
include = ["LICENSE"]

[tool.pytest.ini_options]
log_cli = true
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.ruff]
line-length = 120
target-version = "py39"
# Ignore `F401` (import violations) in all `__init__.py` files
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
check_untyped_defs = true
no_implicit_optional = true
warn_unused_configs = true
disable_error_code = ["override"]
plugins = ["pydantic.mypy"]
exclude = ["tests*"]

[[tool.mypy.overrides]]
module = [
  "a2a.*",
  "ag_ui.*",
  "agentql.*",
  "aioboto3.*",
  "aiohttp.*",
  "aiofiles.*",
  "altair.*",
  "anthropic.*",
  "apify_client.*",
  "arxiv.*",
  "atlassian.*",
  "azure.ai.inference.*",
  "azure.core.*",
  "boto3.*",
  "botocore.*",
  "bs4.*",
  "bson.*",
  "brave.*",
  "browserbase.*",
  "cassio.*",
  "cerebras.*",
  "cerebras_cloud_sdk.*",
  "chonkie.*",
  "chromadb.*",
  "clickhouse_connect.*",
  "clip.*",
  "cohere.*",
  "crawl4ai.*",
  "daytona.*",
  "daytona_api_client.*",
  "discord.*",
  "docker.*",
  "docx.*",
  "duckdb.*",
  "ddgs.*",
  "email_validator.*",
  "e2b_code_interpreter.*",
  "eth_account.*",
  "exa_py.*",
  "fastapi.*",
  "fastembed.*",
  "fastmcp.*",
  "filetype.*",
  "firecrawl.*",
  "github.*",
  "google.*",
  "googlemaps.*",
  "google_maps_places.*",
  "google_auth_oauthlib.*",
  "googleapiclient.*",
  "googlesearch.*",
  "groq.*",
  "hexbytes.*",
  "huggingface_hub.*",
  "ibm_watsonx_ai.*",
  "imghdr.*",
  "infinity_client.*",
  "jira.*",
  "jwt.*",
  "kubernetes.*",
  "lancedb.*",
  "langchain_core.*",
  "langchain.*",
  "llama_index.*",
  "llama_api_client.*",
  "linkup.*",
  "litellm.*",
  "matplotlib.*",
  "mem0.*",
  "memori.*",
  "mcp.*",
  "notion_client.*",
  "memory_profiler.*",
  "mistralai.*",
  "mlx_whisper.*",
  "neo4j.*",
  "nest_asyncio.*",
  "newspaper.*",
  "numpy.*",
  "ollama.*",
  "openai.*",
  "cv2.*",
  "openbb.*",
  "pandas.*",
  "pgvector.*",
  "PIL.*",
  "pinecone_text.*",
  "pinecone.*",
  "portkey_ai.*",
  "playwright.sync_api.*",
  "psycopg.*",
  "pyarrow.*",
  "pycountry.*",
  "pymongo.*",
  "pypdf.*",
  "pytz.*",
  "qdrant_client.*",
  "rapidocr_onnxruntime.*",
  "redis.*",
  "replicate.*",
  "requests.*",
  "scrapegraph_py.*",
  "sentence_transformers.*",
  "serpapi.*",
  "setuptools.*",
  "simplejson.*",
  "slack_sdk.*",
  "spider.*",
  "sqlalchemy.*",
  "starlette.*",
  "streamlit.*",
  "tantivy.*",
  "tavily.*",
  "textract.*",
  "timeout_decorator.*",
  "tiktoken.*",
  "torch.*",
  "todoist_api_python.*",
  "tweepy.*",
  "twilio.*",
  "tzlocal.*",
  "upstash_vector.*",
  "urllib3.*",
  "uvicorn.*",
  "valyu.*",
  "vertexai.*",
  "voyageai.*",
  "weaviate.*",
  "web3.*",
  "webexpythonsdk.*",
  "wikipedia.*",
  "yaml.*",
  "yfinance.*",
  "youtube_transcript_api.*",
  "couchbase.*",
  "acouchbase.*",
  "zep_cloud.*",
  "oxylabs.*",
  "reportlab.*",
  "surrealdb.*",
  "trafilatura.*"
]
ignore_missing_imports = true
